<pre><code>```cpp //Garden module //the esp32 board library version is 2.0.11 and firebase for esp8266 and esp32 by mobizt version is 4.4.17 //including necessary libraries #include &lt;Arduino.h&gt; #include &lt;SPI.h&gt; #include &lt;Wire.h&gt; #include &lt;OneWire.h&gt; #include &lt;DallasTemperature.h&gt; #include &lt;WiFiManager.h&gt; #if defined(ESP32) #include &lt;WiFi.h&gt; #elif defined(ESP8266) #include &lt;ESP8266WiFi.h&gt; #endif #include &lt;Firebase_ESP_Client.h&gt; #include "addons/TokenHelper.h" #include "addons/RTDBHelper.h" #define API_KEY "**********" //get from firebase #define USER_EMAIL "*******" //create a dummy email on firebase #define USER_PASSWORD "*****" //create a dummy password on firebase #define DATABASE_URL "********" //get databse url from firebase #define RESET_WIFI_PIN 0 // GPIO for resetting WiFi credentials #define wifi_led 12 FirebaseData fbdo; FirebaseAuth auth; FirebaseConfig config; String uid; String databasePath; String relayStatusPath25, relayStatusPath26; String relayControlPath25, relayControlPath26; String soil1Path, soil2Path, tempPath, rainPath; String onlineStatusPath; String soilMoistSettingPath1, soilMoistSettingPath2; const int relay1 = 25; const int relay2 = 26; const int soil1 = 34; const int soil2 = 35; const int temp = 33; const int rain = 32; const int AirValue = 2656; const int WaterValue = 1073; int MoistureThreshold1 = 80; int MoistureThreshold2 = 80; bool manualControlRelay1 = false; bool manualControlRelay2 = false; unsigned long relay1StartTime = 0; unsigned long relay2StartTime = 0; const unsigned long relayRunTime = 10000; // 10 seconds OneWire oneWire(temp); DallasTemperature sensor(&oneWire); unsigned long sendDataPrevMillis = 0; unsigned long timerDelay = 1000; WiFiManager wifiManager; void resetWiFi() { wifiManager.resetSettings(); ESP.restart(); } void initWiFiManager() { pinMode(RESET_WIFI_PIN, INPUT_PULLUP); unsigned long pressStart = millis(); while (digitalRead(RESET_WIFI_PIN) == LOW) { if (millis() - pressStart &gt; 5000) { resetWiFi(); } } wifiManager.autoConnect("GardenModuleAP"); } void sendInt(String path, int value) { Firebase.RTDB.setInt(&fbdo, path.c_str(), value); } void sendFloat(String path, float value) { Firebase.RTDB.setFloat(&fbdo, path.c_str(), value); } void fetchSettings() { if (Firebase.RTDB.getInt(&fbdo, soilMoistSettingPath1.c_str())) { MoistureThreshold1 = fbdo.intData(); } if (Firebase.RTDB.getInt(&fbdo, soilMoistSettingPath2.c_str())) { MoistureThreshold2 = fbdo.intData(); } if (Firebase.RTDB.getInt(&fbdo, relayControlPath25.c_str())) { manualControlRelay1 = fbdo.intData(); } if (Firebase.RTDB.getInt(&fbdo, relayControlPath26.c_str())) { manualControlRelay2 = fbdo.intData(); } } void updateOnlineStatus() { Firebase.RTDB.setInt(&fbdo, onlineStatusPath.c_str(), 1); } void setup() { Serial.begin(115200); initWiFiManager(); pinMode(soil1, INPUT); pinMode(soil2, INPUT); pinMode(wifi_led, OUTPUT); digitalWrite(wifi_led, LOW); pinMode(rain, INPUT_PULLUP); sensor.begin(); pinMode(relay1, OUTPUT); digitalWrite(relay1, HIGH); pinMode(relay2, OUTPUT); digitalWrite(relay2, HIGH); config.api_key = API_KEY; auth.user.email = USER_EMAIL; auth.user.password = USER_PASSWORD; config.database_url = DATABASE_URL; Firebase.reconnectWiFi(true); Firebase.begin(&config, &auth); while ((auth.token.uid) == "") { delay(1000); } uid = auth.token.uid.c_str(); databasePath = "/devices/garden"; relayStatusPath25 = databasePath + "/relay_status_25"; relayStatusPath26 = databasePath + "/relay_status_26"; relayControlPath25 = databasePath + "/outputs/digital/25"; relayControlPath26 = databasePath + "/outputs/digital/26"; soil1Path = databasePath + "/soil_1"; soil2Path = databasePath + "/soil_2"; tempPath = databasePath + "/temp"; rainPath = databasePath + "/rain"; onlineStatusPath = databasePath + "/online_status"; soilMoistSettingPath1 = databasePath + "/settings/soil_setting_1"; soilMoistSettingPath2 = databasePath + "/settings/soil_setting_2"; updateOnlineStatus(); fetchSettings(); } void loop() { wifi_led_status(); if (Firebase.ready() &amp;&amp; (millis() - sendDataPrevMillis &gt; timerDelay)) { sendDataPrevMillis = millis(); updateOnlineStatus(); fetchSettings(); int rainstatus = !digitalRead(rain); int soilcent1 = constrain(map(analogRead(soil1), AirValue, WaterValue, 0, 100), 0, 100); if(soilcent1 &gt; 100) { soilcent1 = 100; } int soilcent2 = constrain(map(analogRead(soil2), AirValue, WaterValue, 0, 100), 0, 100); if(soilcent2 &gt; 100) { soilcent2 = 100; } if (manualControlRelay1) { digitalWrite(relay1, LOW); } else { if (rainstatus) { digitalWrite(relay1, HIGH); } else { if (soilcent1 &lt; MoistureThreshold1 &amp;&amp; relay1StartTime == 0) { digitalWrite(relay1, LOW); relay1StartTime = millis(); } else if (relay1StartTime &gt; 0 &amp;&amp; millis() - relay1StartTime &gt;= relayRunTime) { digitalWrite(relay1, HIGH); relay1StartTime = 0; } } } if (manualControlRelay2) { digitalWrite(relay2, LOW); } else { if (rainstatus) { digitalWrite(relay2, HIGH); } else { if (soilcent2 &lt; MoistureThreshold2 &amp;&amp; relay2StartTime == 0) { digitalWrite(relay2, LOW); relay2StartTime = millis(); } else if (relay2StartTime &gt; 0 &amp;&amp; millis() - relay2StartTime &gt;= relayRunTime) { digitalWrite(relay2, HIGH); relay2StartTime = 0; } } } sensor.requestTemperatures(); float temperature = sensor.getTempCByIndex(0); temperature = round(temperature * 100.0) / 100.0; sendInt(soil1Path, soilcent1); sendInt(soil2Path, soilcent2); sendInt(rainPath, rainstatus); sendFloat(tempPath, temperature); sendInt(relayStatusPath25, digitalRead(relay1) == LOW ? 1 : 0); sendInt(relayStatusPath26, digitalRead(relay2) == LOW ? 1 : 0); } if (Firebase.isTokenExpired()) { Firebase.refreshToken(&config); } } void wifi_led_status() { if(WiFi.status() == WL_CONNECTED) { digitalWrite(wifi_led, HIGH); } else { digitalWrite(wifi_led, LOW); } } ``` </code></pre>
