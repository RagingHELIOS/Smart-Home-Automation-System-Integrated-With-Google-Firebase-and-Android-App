//Garden module

//the esp32 board library version is 2.0.11 and firebase for esp8266 and esp32 by mobizt version is 4.4.17

//including necessary libraries
\#include \<Arduino.h>
\#include \<SPI.h>
\#include \<Wire.h>
\#include \<OneWire.h>
\#include \<DallasTemperature.h>
\#include \<WiFiManager.h>
\#if defined(ESP32)
\#include \<WiFi.h>
\#elif defined(ESP8266)
\#include \<ESP8266WiFi.h>
\#endif
\#include \<Firebase\_ESP\_Client.h>
\#include "addons/TokenHelper.h"
\#include "addons/RTDBHelper.h"

\#define API\_KEY "**********"      //get from firebase
\#define USER\_EMAIL "*******"      //create a dummy email on firebase
\#define USER\_PASSWORD "*****"     //create a dummy password on firebase
\#define DATABASE\_URL "**\*\*\*\*\*\*"   //get databse url from firebase

\#define RESET\_WIFI\_PIN 0  // GPIO for resetting WiFi credentials
\#define wifi\_led 12

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

String uid;
String databasePath;
String relayStatusPath25, relayStatusPath26;
String relayControlPath25, relayControlPath26;
String soil1Path, soil2Path, tempPath, rainPath;
String onlineStatusPath;
String soilMoistSettingPath1, soilMoistSettingPath2;

const int relay1 = 25;
const int relay2 = 26;
const int soil1 = 34;
const int soil2 = 35;
const int temp = 33;
const int rain = 32;

const int AirValue = 2656;
const int WaterValue = 1073;
int MoistureThreshold1 = 80;
int MoistureThreshold2 = 80;

bool manualControlRelay1 = false;
bool manualControlRelay2 = false;
unsigned long relay1StartTime = 0;
unsigned long relay2StartTime = 0;
const unsigned long relayRunTime = 10000; // 10 seconds

OneWire oneWire(temp);
DallasTemperature sensor(\&oneWire);

unsigned long sendDataPrevMillis = 0;
unsigned long timerDelay = 1000;

WiFiManager wifiManager;

void resetWiFi()
{
wifiManager.resetSettings();
ESP.restart();
}

void initWiFiManager()
{
pinMode(RESET\_WIFI\_PIN, INPUT\_PULLUP);
unsigned long pressStart = millis();
while (digitalRead(RESET\_WIFI\_PIN) == LOW)
{
if (millis() - pressStart > 5000)
{
resetWiFi();
}
}
wifiManager.autoConnect("GardenModuleAP");
}

void sendInt(String path, int value)
{
Firebase.RTDB.setInt(\&fbdo, path.c\_str(), value);
}

void sendFloat(String path, float value)
{
Firebase.RTDB.setFloat(\&fbdo, path.c\_str(), value);
}

void fetchSettings()
{
if (Firebase.RTDB.getInt(\&fbdo, soilMoistSettingPath1.c\_str()))
{
MoistureThreshold1 = fbdo.intData();
}
if (Firebase.RTDB.getInt(\&fbdo, soilMoistSettingPath2.c\_str()))
{
MoistureThreshold2 = fbdo.intData();
}
if (Firebase.RTDB.getInt(\&fbdo, relayControlPath25.c\_str()))
{
manualControlRelay1 = fbdo.intData();
}
if (Firebase.RTDB.getInt(\&fbdo, relayControlPath26.c\_str()))
{
manualControlRelay2 = fbdo.intData();
}
}

void updateOnlineStatus()
{
Firebase.RTDB.setInt(\&fbdo, onlineStatusPath.c\_str(), 1);
}

void setup()
{
Serial.begin(115200);
initWiFiManager();

pinMode(soil1, INPUT);
pinMode(soil2, INPUT);
pinMode(wifi\_led, OUTPUT);
digitalWrite(wifi\_led, LOW);
pinMode(rain, INPUT\_PULLUP);
sensor.begin();

pinMode(relay1, OUTPUT);
digitalWrite(relay1, HIGH);
pinMode(relay2, OUTPUT);
digitalWrite(relay2, HIGH);

config.api\_key = API\_KEY;
auth.user.email = USER\_EMAIL;
auth.user.password = USER\_PASSWORD;
config.database\_url = DATABASE\_URL;

Firebase.reconnectWiFi(true);
Firebase.begin(\&config, \&auth);

while ((auth.token.uid) == "")
{
delay(1000);
}
uid = auth.token.uid.c\_str();
databasePath = "/devices/garden";
relayStatusPath25 = databasePath + "/relay\_status\_25";
relayStatusPath26 = databasePath + "/relay\_status\_26";
relayControlPath25 = databasePath + "/outputs/digital/25";
relayControlPath26 = databasePath + "/outputs/digital/26";
soil1Path = databasePath + "/soil\_1";
soil2Path = databasePath + "/soil\_2";
tempPath = databasePath + "/temp";
rainPath = databasePath + "/rain";
onlineStatusPath = databasePath + "/online\_status";
soilMoistSettingPath1 = databasePath + "/settings/soil\_setting\_1";
soilMoistSettingPath2 = databasePath + "/settings/soil\_setting\_2";

updateOnlineStatus();
fetchSettings();
}

void loop()
{
wifi\_led\_status();
if (Firebase.ready() && (millis() - sendDataPrevMillis > timerDelay))
{
sendDataPrevMillis = millis();
updateOnlineStatus();
fetchSettings();

```
int rainstatus = !digitalRead(rain);
int soilcent1 = constrain(map(analogRead(soil1), AirValue, WaterValue, 0, 100), 0, 100);
if(soilcent1 > 100)
{
  soilcent1 = 100;
}
int soilcent2 = constrain(map(analogRead(soil2), AirValue, WaterValue, 0, 100), 0, 100);
if(soilcent2 > 100)
{
  soilcent2 = 100;
}

if (manualControlRelay1)
{
  digitalWrite(relay1, LOW);
}
else
{
  if (rainstatus)
  {
    digitalWrite(relay1, HIGH);
  }
  else
  {
    if (soilcent1 < MoistureThreshold1 && relay1StartTime == 0)
    {
      digitalWrite(relay1, LOW);
      relay1StartTime = millis();
    }
    else if (relay1StartTime > 0 && millis() - relay1StartTime >= relayRunTime)
    {
      digitalWrite(relay1, HIGH);
      relay1StartTime = 0;
    }
  }
}

if (manualControlRelay2)
{
  digitalWrite(relay2, LOW);
}
else
{
  if (rainstatus)
  {
    digitalWrite(relay2, HIGH);
  }
  else
  {
    if (soilcent2 < MoistureThreshold2 && relay2StartTime == 0)
    {
      digitalWrite(relay2, LOW);
      relay2StartTime = millis();
    }
    else if (relay2StartTime > 0 && millis() - relay2StartTime >= relayRunTime)
    {
      digitalWrite(relay2, HIGH);
      relay2StartTime = 0;
    }
  }
}

sensor.requestTemperatures();
float temperature = sensor.getTempCByIndex(0);
temperature = round(temperature * 100.0) / 100.0;

sendInt(soil1Path, soilcent1);
sendInt(soil2Path, soilcent2);
sendInt(rainPath, rainstatus);
sendFloat(tempPath, temperature);
sendInt(relayStatusPath25, digitalRead(relay1) == LOW ? 1 : 0);
sendInt(relayStatusPath26, digitalRead(relay2) == LOW ? 1 : 0);
```

}
if (Firebase.isTokenExpired())
{
Firebase.refreshToken(\&config);
}
}

void wifi\_led\_status()
{
if(WiFi.status() == WL\_CONNECTED)
{
digitalWrite(wifi\_led, HIGH);
}
else
{
digitalWrite(wifi\_led, LOW);
}
}
